apiVersion: batch/v1
kind: Job
metadata:
  name: cloudant-secret-generator-deploy
  labels:
    app: microservice-cloudant
spec:
  template:
    metadata:
      name: cloudant-secret-generator-deploy
    spec:
      containers:
      - name: cloudant-secret-generator-deploy
        image: ibmcom/kubernetes:v1.9.1
        command: ["/bin/sh","-c"]
        args: ["/kubectl get secret cloudant-secret || /kubectl create secret generic cloudant-secret --from-literal=dbUsername=admin --from-literal=dbPassword=`< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;`"]
        resources:
          limits:
            cpu: 100m
      restartPolicy: Never
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: cloudant-pv
  labels:
    app: microprofile-app
spec:
  capacity:
    storage: 4Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/var/cloudant"
  persistentVolumeReclaimPolicy: Recycle
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: cloudant-pv-claim
  labels:
    app: microprofile-app
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi
---
apiVersion: v1
kind: Service
metadata:
  name: cloudant-service
  labels:
    app: microservice-cloudant
spec:
  clusterIP: None
  ports:
    - port: 80
      targetPort: 80
      name: http
  selector:
    app: microservice-cloudant
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-cloudant-deployment
  labels:
    app: microservice-cloudant
spec:
  replicas: 1
  selector:
    matchLabels:
      app: microservice-cloudant
  template:
    metadata:
      labels:
        app: microservice-cloudant
        version: v1
    spec:
      containers:
      - name: cloudant-db
        image: ibmcom/cloudant-developer:1.0.1
        imagePullPolicy: IfNotPresent
        env:
        - name: dbUsername
          valueFrom:
            secretKeyRef:
              name: cloudant-secret
              key: dbUsername
        - name: dbPassword
          valueFrom:
            secretKeyRef:
              name: cloudant-secret
              key: dbPassword
        command: ["/bin/sh","-c"]
        args: ["if [ ! -z $dbPassword ]; then sed -i 's/^admin.*/admin = '$dbPassword'/g' /opt/cloudant/etc/local.ini && sed -i 's/^cloudant.*/cloudant = '$dbPassword'/g' /opt/cloudant/etc/local.ini && if [ ! -a /srv/cloudant ]; then sed -i 's/172.17.0.2/127.0.0.1/g' /etc/haproxy/haproxy.cfg && cast license --silent && cast database init -v -y -p $dbPassword ; fi; exec /usr/sbin/init; fi;"]
        securityContext:
          privileged: true
        ports:
          - containerPort: 80
        volumeMounts:
        - name: cloudant-pv
          mountPath: /srv
      volumes:
        - name: cloudant-pv
          persistentVolumeClaim:
            claimName: cloudant-pv-claim
